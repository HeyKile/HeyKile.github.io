Budget Beater is a web-based spending tracker allowing users to log and track purchases across user-created categories. Users can track purchases by category, the remaining budget they have left in each category, as well as categories they were over budget. The app itself is not styled and unfinished, and I have no plans to change that because my heart isn't in it. However, I do want to talk about this project because I did a lot of work on this application.
This first started as a Rust API I built for a web development class, supporting simple HTTP requests for budget tracking. After the course, I set out to expand the app, adding a React front-end and enhancing the backend. It was in this expansion where things got complicated, specifically with the Rust backend. I was becoming increasingly frustrated trying to write a web API in Rust, as it was extremely bloated and laborious (genuinely, it was a skill issue). I wasn't able to move quickly trying to write Rust, which killed my motivation to continue the project. Eventually, I decided to switch to a Python-based API, allowing me to move much faster. In fact, I had entirely rebuild the same backend in just 2 days, which had taken me over a month with Rust.
This is not some slight at Rust. In fact, I think Rust is great! My point here is that choosing the right language for the job is important. In this case, Rust was a bad choice because Budget Beater was not an app that needed extreme performance. As well, I was already trying to learn React at this point, and combining the two lead to snails-pace progress. There are many things I'd have done differently with this app, but it was absolutely a learning moment for me.