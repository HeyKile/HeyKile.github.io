Functional programming changed the way I write code.
Functional Programming is a Pitt course that is still being workshopped, and I had the pleasure of taking it with a professor I really enjoyed. Throughout course, we were tasked with developing a variety of "simple" text-based programs entirely in Haskell. I developed an algebraic calculator, sudoku solver, Huffman encoder/decoder, and a cash register program. These projects all proved to be challenging in a language like Haskell, but taught me the power functional programming.
Before learning Haskell, I had used a variety of object-oriented and imperative programming languages. However, I don't think I truly understood their benefits and drawbacks until coding in the functional paradigm. With this knowledge, I have a newfound appreciate for pure functions and dependency injection. While side effects are useful in many scenarios, removing side effects in certain areas has allowed me to write better code that is more testable. As well, monads and enums have become my favorite way to handle return/error values. Being able to declare and handle all possible return types is a powerful feature that takes away the guessing game in languages like JavaScript. I will forever cherish Rust's match keyword and enum system.
Overall, functional programming is extremely cool made me a much stronger programmer. While I don't plan on returning to Haskell anytime soon, the functional paradigm lives on through my code.